# Docker Compose configuration for LXC Autoscaler
# Production-ready setup with proper volume mounts and configuration

version: '3.8'

services:
  lxc-autoscaler:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-}
    image: lxc-autoscaler:${VERSION:-latest}
    container_name: lxc-autoscaler
    hostname: lxc-autoscaler
    restart: unless-stopped
    
    # Security context
    user: "1001:1001"
    read_only: false  # Set to true for even more security, but may require tmpfs mounts
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Environment variables
    environment:
      # Configuration
      - LXC_AUTOSCALER_CONFIG_PATH=/app/config/config.yaml
      - LXC_AUTOSCALER_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LXC_AUTOSCALER_PID_FILE=/app/run/lxc-autoscaler.pid
      - LXC_AUTOSCALER_LOG_FILE=/app/logs/lxc-autoscaler.log
      
      # Proxmox credentials (use environment variables for security)
      - PROXMOX_PASSWORD=${PROXMOX_PASSWORD:-}
      - PROXMOX_TOKEN=${PROXMOX_TOKEN:-}
      
      # Operational settings
      - DRY_RUN=${DRY_RUN:-false}
      - TZ=${TZ:-UTC}
    
    # Volume mounts
    volumes:
      # Configuration directory (required)
      - ./config:/app/config:ro
      # Log directory (persistent)
      - lxc-autoscaler-logs:/app/logs
      # Runtime directory (temporary)
      - lxc-autoscaler-run:/app/run
      # Data directory (for future use)
      - lxc-autoscaler-data:/app/data
    
    # Network configuration
    networks:
      - lxc-autoscaler-net
    
    # Health check override (optional)
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import sys, os, time; from pathlib import Path; pid_file = Path(os.environ.get('LXC_AUTOSCALER_PID_FILE', '/app/run/lxc-autoscaler.pid')); sys.exit(0 if pid_file.exists() and os.kill(int(pid_file.read_text().strip()), 0) is None else 1)\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Process limits
    ulimits:
      nproc: 1024
      nofile: 1024
    
    # Labels for organization
    labels:
      - "com.lxc-autoscaler.service=daemon"
      - "com.lxc-autoscaler.version=${VERSION:-1.0.0}"

# Named volumes for persistence
volumes:
  lxc-autoscaler-logs:
    driver: local
    labels:
      - "com.lxc-autoscaler.volume=logs"
  
  lxc-autoscaler-run:
    driver: local
    labels:
      - "com.lxc-autoscaler.volume=runtime"
  
  lxc-autoscaler-data:
    driver: local
    labels:
      - "com.lxc-autoscaler.volume=data"

# Custom network for isolation
networks:
  lxc-autoscaler-net:
    driver: bridge
    labels:
      - "com.lxc-autoscaler.network=main"

# Override configurations for different environments
---
# Development override (docker-compose.override.yml)
# Uncomment and save as docker-compose.override.yml for development

# version: '3.8'
# 
# services:
#   lxc-autoscaler:
#     # Development-specific settings
#     build:
#       target: runtime  # Use runtime stage
#     
#     environment:
#       - LXC_AUTOSCALER_LOG_LEVEL=DEBUG
#       - DRY_RUN=true  # Enable dry-run for development
#     
#     volumes:
#       # Mount source code for development
#       - .:/app/src:ro
#       - ./examples:/app/config:ro
#     
#     # Remove resource limits for development
#     deploy: {}
#     
#     # Override entrypoint for development
#     # entrypoint: ["/usr/bin/tini", "--", "/bin/bash"]
#     # command: ["-c", "while true; do sleep 30; done"]